Here are some string formatting related syntaxes specific to Arduino, related to Serial.print()

\n ----> new line/linefeed character (include it inside your " ")
\t ----> tab character               (include it inside your " ")
\r ----> carraige return             (control character -doesn't print something but tells the printer what to do- that tells cursor to print next character of the string at the beginning of the line)
  • println() is a combination of carraige return (\r) and linefeed (\n) i.e. \r\n
\0 ----> null zero
  • Strings can also bre made from an array of char datatype and null terminate it (not only directly through string datatype)
      e.g. char str[3] = { 'c' , 'a' , 'r'};
           char str[4] = {'c' , 'a'' , 'r' , '\0'}
           char str[]  = "car";
           char str[4] = "car";
  • Normally string are terminated with a null character, allowing print functions to tell where the end of a string is; else they will continue reading subsequent bytes of memory that aren't part of string 
  • This string needs to have space for one more character than text you want it to contain, filling up last position with null character (\0)
       1)        void loop() 
                   {
                    char str[] = {'c' , 'a' , 'r'};
                    Serial.println(sizeof(str));
                   } 
              
           OUTPUT: 3
    
       2)     void loop() 
                {
                 char str[] = {'c' , 'a' , 'r','\0'};
                 Serial.println(sizeof(str));
                 delay(100000);
                }
          
          OUTPUT: 4

Checking the length of a string:
  1. length() ---> if the string was defined conventionally as a default String datatype (in " ") 
  2. sizeof() ---> if string was defined as a character array



